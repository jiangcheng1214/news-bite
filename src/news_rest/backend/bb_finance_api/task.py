import json
import sys
import time
from bb_finance_api.rapid_api import rapid_bb_finance_api
import logging
import pika

from utils.redis_factory import RedisFactory


logger = logging.getLogger(__name__)


def get_news_list():
    # Connect to the RabbitMQ server
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()
    markets = "markets|technology|view|pursuits|politics|green|citylab|businessweek|fixed-income|hyperdrive|cryptocurrencies|wealth|latest|personalFinance|quickTake|world|industries|stocks|currencies|brexit"
    markets = markets.split("|")
    #markets = ["markets"]
    for market in markets:
        api = rapid_bb_finance_api.RapidBBFinanceAPI('6978d0ce6amsh90937165805856ap15260bjsn6ff4479a96f6')
        news_list = api.get_news_list(market)
        if news_list:
            # with open('static/json_data/markets.json') as f:
            #     news_list = json.load(f)
            #logger.debug(news_list)
            key = 'news_queue_' + market
            # Declare the queue
            channel.queue_declare(key)
            for item in news_list['modules']:
                if len(item['stories']) > 0:
                    for story in item['stories']:
                        obj = {}
                        obj['internal_id'] = story['internalID']
                        obj['created_at'] = story['published']
                        obj['summary'] = story['autoGeneratedSummary']
                        RedisFactory().hmset(story['internalID'], story)
                        #message.append(obj)
                        #Send a message to the queue
                        channel.basic_publish(exchange='', routing_key=key, body=json.dumps(obj))
                        time.sleep(0.2)
        else:
            logger.error(f"Failed to get news list. Error")
    
    # Close the connection
    connection.close()

